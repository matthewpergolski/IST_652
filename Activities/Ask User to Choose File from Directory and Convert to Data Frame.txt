import pandas as pd
import ipywidgets as widgets
from IPython.display import clear_output
from ipyfilechooser import FileChooser
from ipywidgets import interact
from pathlib import Path

# get home dir of user
home = str(Path.home()) 

# initialize a dict for the excel file; this removes the need to set global values
dict_file = {}

# change to simply `home` if you want users to navigate through diff dirs
#fc = FileChooser(f'{home}/excel')
fc = FileChooser(f'{home}/Documents') 

# same here
#fc.sandbox_path = f'{home}/excel'
fc.sandbox_path = f'{home}/Documents'

# limit file extensions to '.xls, .xlsb, .xlsm, .xlsx'
fc.filter_pattern = ['*.xls*']
fc.title = '<b>Select Excel file</b>'
display(fc)

# create empty dropdown for sheet names
dropdown = widgets.Dropdown(options=[''], value='', description='Sheets:', disabled=False)

# create output frame for the df
out = widgets.Output(layout=widgets.Layout(display='flex', flex_flow='column', align_items='flex-start', width='100%'))

# callback func for FileChooser
def get_sheets(chooser): 

    # (re)populate dict
    dict_file.clear() 
    dict_file['file'] = pd.ExcelFile(fc.value)
    sheet_names = dict_file['file'].sheet_names
    
    # only 1 sheet, we'll print this one immediate (further below)
    if len(sheet_names) == 1:
        
        # set value of the dropdown to this sheet
        dropdown.options = sheet_names
        dropdown.value = sheet_names[0]
        
        # disable the dropdown; so it's just showing the selection to the user
        dropdown.disabled = True
    else:
        
        # append empty string and set this as default; this way the user must always make a deliberate choice
        sheet_names.append('')
        dropdown.options = sheet_names
        dropdown.value = sheet_names[-1]
        
        # allow selection by user
        dropdown.disabled = False
    return

# bind FileChooser to callback
fc.register_callback(get_sheets)

# prompt on selection sheet
def show_df(sheet):
    if sheet == '':
        if out != None:
            # clear previous df, when user selects a new wb
            out.clear_output()
    else:
        # clear previous output 'out' frame before displaying new df, else they'll get stacked
        out.clear_output()
        with out:
            df = dict_file['file'].parse(sheet_name=sheet)
            if len(df) == 0:
                # if sheet is empty, let the user know
                display('empty sheet')
            else:
                display(df)
    return

# func show_df is called with input of widget as param on selection sheet
interact(show_df, sheet=dropdown)

# display 'out' (with df)
display(out)

################################################

import pandas as pd
import tkinter as tk
from tkinter import ttk, filedialog

root = tk.Tk()
root.withdraw()

path = filedialog.askopenfilename()

# Get the sheetnames first without parsing all the sheets
excel_file = pd.ExcelFile(path)
sheet_names = excel_file.sheet_names
sheet_name = None

if len(sheet_names) == 1:
    sheet_name = sheet_names[0]
elif len(sheet_names) > 1:
    # Show the window again
    root.deiconify()
    root.minsize(280, 30)
    root.title('Select sheet to open')
    
    # Create a combobox with the sheetnames as options to select
    combotext = tk.StringVar(value=sheet_names[0])
    box = ttk.Combobox(textvariable=combotext, 
                       values=sheet_names, 
                       state='readonly')
    box.pack()
    
    # This function gets called when you select an item in the combobox
    def callback_function(event):
        # Mark sheet_name as global so it doesn't just make a new local variable
        global sheet_name
        sheet_name = combotext.get()
        
        # Close tkinter so Python can continue execution after root.mainloop()
        root.destroy()
    
    root.bind('<<ComboboxSelected>>', callback_function)
    root.mainloop()

# Finally, parse the selected sheet
# This is equivalent to pd.read_excel
df = excel_file.parse(sheet_name=sheet_name)
df

###################################################


import pandas as pd
import tkinter as tk
from tkinter import ttk, filedialog

root = tk.Tk()
root.withdraw()
root.call('wm', 'attributes', '.', '-topmost', True)

path = filedialog.askopenfilename()

# Get the sheetnames first without parsing all the sheets
excel_file = pd.ExcelFile(path)
sheet_names = excel_file.sheet_names
sheet_name = None

if len(sheet_names) == 1:
    sheet_name = sheet_names[0]
elif len(sheet_names) > 1:
    # Show the window again
    root.deiconify()
    root.minsize(280, 30)
    root.title('Select sheet to open')
    
    # Create a combobox with the sheetnames as options to select
    combotext = tk.StringVar(value=sheet_names[0])
    box = ttk.Combobox(root, 
                       textvariable=combotext, 
                       values=sheet_names, 
                       state='readonly')
    box.pack()
    
    # This function gets called when you select an item in the combobox
    def callback_function(event):
        # Mark sheet_name as global so it doesn't just make a new local variable
        global sheet_name
        sheet_name = combotext.get()
        
        # Close tkinter so Python can continue execution after root.mainloop()
        root.destroy()
    
    root.bind('<<ComboboxSelected>>', callback_function)
    root.mainloop()

# Finally, parse the selected sheet
# This is equivalent to pd.read_excel
df = excel_file.parse(sheet_name=sheet_name)
df